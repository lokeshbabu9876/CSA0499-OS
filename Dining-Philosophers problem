#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <unistd.h>

#define NUM_PHILOSOPHERS 5
#define NUM_MEALS 3

pthread_mutex_t chopsticks[NUM_PHILOSOPHERS];
pthread_t philosophers[NUM_PHILOSOPHERS];
int meals_eaten[NUM_PHILOSOPHERS] = {0};

void *philosopher(void *arg) {
    int id = *((int *)arg);
    int left_chopstick = id;
    int right_chopstick = (id + 1) % NUM_PHILOSOPHERS;

    for (int i = 0; i < NUM_MEALS; ++i) {
        printf("Philosopher %d is thinking\n", id);

        pthread_mutex_lock(&chopsticks[left_chopstick]);
        pthread_mutex_lock(&chopsticks[right_chopstick]);

        printf("Philosopher %d is eating\n", id);
        meals_eaten[id]++;

        pthread_mutex_unlock(&chopsticks[left_chopstick]);
        pthread_mutex_unlock(&chopsticks[right_chopstick]);

        usleep(rand() % 1000000); // Simulate eating time
    }

    return NULL;
}

int main() {
    srand(time(NULL));

    // Initialize mutexes
    for (int i = 0; i < NUM_PHILOSOPHERS; ++i) {
        pthread_mutex_init(&chopsticks[i], NULL);
    }

    // Create philosopher threads
    for (int i = 0; i < NUM_PHILOSOPHERS; ++i) {
        int *id = (int *)malloc(sizeof(int));
        *id = i;
        pthread_create(&philosophers[i], NULL, philosopher, (void *)id);
    }

    // Join philosopher threads
    for (int i = 0; i < NUM_PHILOSOPHERS; ++i) {
        pthread_join(philosophers[i], NULL);
    }

    // Destroy mutexes
    for (int i = 0; i < NUM_PHILOSOPHERS; ++i) {
        pthread_mutex_destroy(&chopsticks[i]);
    }

    // Print meals eaten by each philosopher
    printf("Meals eaten by each philosopher:\n");
    for (int i = 0; i < NUM_PHILOSOPHERS; ++i) {
        printf("Philosopher %d: %d meals\n", i, meals_eaten[i]);
    }

    return 0;
}
